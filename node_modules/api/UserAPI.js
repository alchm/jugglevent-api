if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}

////////////
// User API
////////////

define([
    'mongoose',
    'sha512-min'
], function (mongoose, sha512) {

    var exports = {},
        User    = mongoose.model('User');

    exports.getById = function(userId, done) {
        User.findOne({ _id: userId }, function(err, data) {
            done(err, data);
        });
    };

    exports.updateById = function(userId, userData, done) {
        User.findOne({ '_id': userId }, function(err, user){
            if (user) {
                user.firstname  = userData.firstname;
                user.lastname   = userData.lastname;
                user.email      = userData.email;
                user.city       = userData.city;
                user.save( function (err) {
                    if (!err) done(null, user);
                    else done(err, null);
                });
            } else done(new Error('Undefined user'), null);
        });
    };

    /*
     Creates a new user in database if it doesn't already exists
     It first look up for existing user by email comparison
     */
    exports.new = function(userData, done){
        User.findOne({ email: userData.email }, function (err, user){
            /*
             If no user found,
             it creates new user based on Mongoose User model,
             then sets values from request to the new user
             */
            if (user == null) {

                // Creating new user model
                user = new User();

                // user.firstname is set by the firstname field from the form
                user.firstname = userData.firstname;

                // user.lastname is set by the lastname field from the form
                user.lastname = userData.lastname;

                /*
                 TODO: THIS DO NOT ACTUALLY VERIFY IF THE USERNAME IS UNIQUE
                 user.username is set by the lastname field from the form
                 username MUST be unique, see form validator's regex
                 */
                user.username = userData.username;

                /*
                 user.email is set by the email field from the form
                 It use toLowerCase to provide unique email:
                 "name@domain.com" is equivalent to "NaMe@DoMaIn.Com"
                 */
                user.email = userData.email.toLowerCase();

                /*
                user.city is set by the city selector from the form
                 user.city MUST be an ObjectId referencing a cities document in database
                 */
                user.city = userData.city;

                /*
                 user.password is set by the password field from the form
                 It use sha512 module to compute a secure hashed password
                 */
                user.password = sha512.compute(userData.password);

                /*
                 user.lang is the locale user language
                 */
                user.lang = 'en';

                /*
                 Now we can save the created user in the database
                 */
                user.save(function (err) {
                    if (!err) {
                        done(null, user);
                    }
                    else {
                        done(err, null);
                    }
                });
            /*
             If a user if found, user registration function must stops
             */
            } else {
                done(new Error("Duplicate user"), null);
            }
        });
    };

    exports.updateLanguage = function(id, userData, done) {
        User.findOne({ '_id': id }, function(err,user){
            if (user) {
                user.lang = userData.lang;
                user.save(function(err) {
                    if (!err) done(null, user);
                    else done(err, null);
                });
            } else done(new Error('Undefined user'), null);
        });
    }

    exports.getDashboardData = function(userData, done) {
        User.findOne({ 'username': userData.username }, function(err, datas) {
            done(err, datas);
        });
    }

    exports.getAssociations = function(userData, done) {
        User.findOne({ 'username': userData.username })
            .populate('associations', 'name contact nbFollowers')
            .exec(function(err, data) {
                if(!err) {
                    if (data) done(null, data);
                    else done(new Error('Undefined user'), null);
                }
                else done(err, null);
            });
    }

    return exports;

});