if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}

///////////////////
// Association API
///////////////////

define([
    'mongoose',
    'sha512-min',
    'underscore',
    'async'
], function (mongoose, sha512, _, async) {

    var exports     = {},
        Association = mongoose.model('Association'),
        User        = mongoose.model('User');

    /*
     Creates a new association in database if it doesn't already exists
     It first look up for existing asso by email comparison
     */
    exports.new = function(associationData, done){

        Association.findOne({ name: associationData.name }, function (err, a){
            /*
             If no association found,
             it creates new association based on Mongoose User model,
             then sets values from request to the new association
             */
            if (a == null) {

                // Creating new association model
                a           = new Association(),
                a.city      = associationData.city,
                a.school    = associationData.school,
                a.name      = associationData.name,
                a.contact   = associationData.contact.toLowerCase(),

                User.findOne({ email: associationData.email }, '_id associations password', function(err, user){
                    if (!err) {
                        if (user && user.password == sha512.compute(associationData.password)) {
                            a.admins.push( user );
                            a.save(function (err) {
                                if (!err) {
                                    user.associations.push( a );
                                    user.save( function (err) {
                                        if (!err) done(null, a);
                                        else done(err, null);
                                    });
                                } else done(err, null);
                            });
                        } else done(err, null);
                    } else done(err, null);

                });
            } else done(new Error("Duplicate association"), null);
        });
    };

    exports.getProfileData = function (associationName, done) {
        Association.findOne({ name : associationName })
            .populate('followers')
            .exec(function (err, asso) {
                if (!err) {
                    if (asso) done(null, asso);
                    else done(new Error('Undefined association'), null);
                } done(err, null);
            });
    };

    exports.getFollowers = function (associationName, done) {
        Association.findOne({ name : associationName })
            .populate('followers', 'username')
            .exec(function (err, asso) {
                if (!err) {
                    if (asso) done(null, asso);
                    else done(new Error('Undefined association'), null);
                } done(err, null);
            });
    };

    exports.addFollower = function (associationName, userId, done) {
        Association.findOne({ name : associationName }, 'followers', function (err, asso) {
            if (!err) {
                if (asso) {
                    async.waterfall([
                        function (callback) {
                            var map = _.map(asso.followers, function (user) { return user.toString(); });
                            callback(null, map);
                        },
                        function (map, callback) {
                            console.log('map :');
                            console.log(map);
                            var isFollowing = _.contains(map, userId);
                            callback(null, isFollowing);
                        }
                    ], function (err, isFollowing) {
                        console.log('isFollowing : ' + isFollowing);
                        if (!isFollowing) {
                            asso.followers.push( userId );
                            asso.save( function (err) {
                                if (!err) done(null, asso);
                                else done(err, null);
                            });
                        } else done(new Error('Already following'), null);
                    });
                } else done(new Error('Undefined association'), null);
            } else done(err, null);
        });
    };

    exports.removeFollower = function (associationName, userId, done) {
        Association.findOne({ name : associationName }, 'followers', function (err, asso) {
            if (!err) {
                if (asso) {
                    async.waterfall([ // THIS MUST BE PASSED IN CONTROLLER
                        function (callback) {
                            var map = _.map(asso.followers, function (user) { return user.toString(); });
                            callback(null, map);
                        },
                        function (map, callback) {
                            var isFollowing = _.contains(map, userId);
                            callback(null, isFollowing);
                        }
                    ], function (err, isFollowing) {
                        if (isFollowing) {
                            asso.followers.pull( userId );
                            asso.save( function (err) {
                                if (!err) done(null, asso);
                                else done(new Error('Unable to save data'), null);
                            });
                        } else done(new Error('User is not following the association'));
                    });
                } else done(new Error('Undefined association'));
            } else done(err, null);
        });
    };

    return exports;

});



// Population tests
/*
exports.populate = function(id) {
    Association.findOne({ _id: id })
        .populate('admins')
        .exec(function(err, asso){
            if (!err) { console.log('found : '); console.log(asso); }
            else console.log(err);
        });
    /*Association.findOne({_id : id}, function(err, asso){
       if (!err) {
           if (asso) User.findOne({_id: "51e47c1857e4016f0b000001"}, function(err, user){
               if (!err){
                   if (user) {
                       asso.admins.push( user );
                       console.log('user pushed');
                       asso.save(function(err){
                           if (!err) console.log('asso saved');
                           else console.log("asso unsaved");
                       });
                   }
               } else console.log('find one user error');
           });
       } else console.log('find on asso error');
    });*/
//}
/*exports.update = function(req) {
    User.findOne({ '_id': req.user._id }, function(err, user){
        user.firstname = req.body.firstname;
        user.lastname = req.body.lastname;
        user.email = req.body.email;
        user.city = req.body.city;
        user.save(function (err) {
            if (!err) {
                console.log('User successfully updated : ' + req.body.email);
            }
            else {
                console.log('Error on user update :' + err);
            }
        });
    });
}*/